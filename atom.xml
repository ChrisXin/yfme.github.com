<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yangfei.me]]></title>
  <link href="http://yangfei.me/atom.xml" rel="self"/>
  <link href="http://yangfei.me/"/>
  <updated>2013-11-12T14:49:24+08:00</updated>
  <id>http://yangfei.me/</id>
  <author>
    <name><![CDATA[Fei Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iDev Weekly - 1112]]></title>
    <link href="http://yangfei.me/blog/2013-11-12-idevweekly/"/>
    <updated>2013-11-12T18:00:00+08:00</updated>
    <id>http://yangfei.me/blog/idevweekly</id>
    <content type="html"><![CDATA[<h2>文章</h2>

<h4>• <a href="http://www.objc.io/issue-6/">objc.io #6 Build Tools</a></h4>

<p>objc.io 是月刊，内容很有深度。这是第六期《关于构建工具》。</p>

<!-- more -->


<h4>• <a href="http://www.yangzhiping.com/psy/startup.html">iOS 7 人机界面指南</a></h4>

<p>腾讯ISUX设计团队翻译了几篇文章：</p>

<ul>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html">iOS 人机界面指南（界面设计基础部分）</a></li>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-ios7-ui-1.html">iOS 人机界面指南（UI元素（上））</a></li>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-ios7-ui-2.html">iOS 人机界面指南（UI元素（下））</a></li>
</ul>


<h2>开源代码</h2>

<h4>• <a href="https://github.com/robb/RBBAnimation/">RBBAnimation</a></h4>

<p>iOS 7 之后，动画显得愈加重要。RBBAnimation 让动画写起来更简单，它继承于 CAKeyframeAnimation，可以方便地通过 block 定义你的动画。</p>

<h4>• <a href="https://github.com/mysterioustrousers/MTMigration">MTMigration</a></h4>

<p>有时候需要在不同版本执行不同的代码，MTMigration 可以让这部分变得简单。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[MTMigration migrateToVersion:@"0.9" block:^{
</span><span class='line'>    // Some 0.9 stuff
</span><span class='line'>}];
</span><span class='line'>
</span><span class='line'>[MTMigration migrateToVersion:@"1.0" block:^{
</span><span class='line'>    // Some 1.0 stuff
</span><span class='line'>}];</span></code></pre></td></tr></table></div></figure>


<h4>• <a href="https://github.com/mineschan/MZTimerLabel">MZTimerLabel</a></h4>

<p>最近的 countdown label 不少，还有几个：</p>

<ul>
<li><a href="https://github.com/TriggerTrap/TTCounterLabel">TTCounterLabel</a></li>
<li><a href="https://github.com/ChrisXu1221/CXCountDownLabel">CXCountDownLabel</a></li>
<li><a href="https://github.com/MattFoley/MFLTransformingDigits">MFLTransformingDigits</a> 这个不是 label，是 view。效果很炫。</li>
</ul>


<h4>• <a href="https://github.com/mariohahn/MHDismissModalView/">MHDismissModalView</a></h4>

<p>下拉的手势可以 dismiss 掉 modalView，很有趣的细节。</p>

<h4>• <a href="https://github.com/kevinzhow/PNChart">PNChart</a></h4>

<p>简单、漂亮的线状图/柱状图。</p>

<h4>• <a href="https://github.com/lgaches/BeaconEmitter">BeaconEmitter</a>/<a href="https://github.com/mttrb/BeaconOSX">BeaconOSX</a></h4>

<p>将 Mac 变成 iBeacon。</p>

<h2>开源项目</h2>

<h4>• <a href="https://github.com/Ink/ThatPhoto">ThatPhoto</a></h4>

<p>完整的图片编辑 app。是 Ink 的开源项目之一，另外几个：</p>

<ul>
<li><a href="https://github.com/Ink/ThatInbox">ThatInbox</a></li>
<li><a href="https://github.com/Ink/ThatPDF">ThatPDF</a></li>
<li><a href="https://github.com/Ink/ThatCloud">ThatCloud</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让构建和测试变得更轻松：xctool]]></title>
    <link href="http://yangfei.me/blog/2013-11-06-xctool/"/>
    <updated>2013-11-06T18:00:00+08:00</updated>
    <id>http://yangfei.me/blog/xctool</id>
    <content type="html"><![CDATA[<blockquote><p>控制了一门语言的构建系统（build system），就控制了这门语言的命运，以及它的生态和社区。</p></blockquote>

<p>Objective-C 用很短的时间，取得了非常大的变化。在短短几年间，这门语言从 NeXT 的“废墟”中走出，成为<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">颇具影响力</a>的一门语言。开源社区对于 Objective-C 有着巨大的贡献，其中一个很重要的方面是：开发工具。</p>

<!-- more -->


<p>例如 <a href="http://cocoapods.org/">CocoaPods</a>，它充分证明了科技和社区结合的威力。两年间，有超过 2700 个开源的库或框架被添加进去，你只需要简单的命令行 &ndash; <code>pod install</code>，就可以轻松管理第三方库。</p>

<p>开源社区对于 iOS 和 Mac OS X 开发的各个方面都有着巨大贡献，第三方库管理只是其中一个，其他方面还包括<a href="http://nomad-cli.com/">自动配置和分发</a>、<a href="http://www.quickradar.com/">报告BUG</a>、<a href="http://cocoadocs.org/">文档检索</a>等。</p>

<p>但是本周，我们聚焦于这样一个工具：它重新定义了构建过程，是新一代开发集成的基础——xctool。</p>

<p><a href="https://github.com/facebook/xctool">xctool</a> 是 <a href="https://github.com/fpotter">Fred Potter</a> 的开源项目，来自于他在 Facebook 工作中创建的自动构建系统。xctool 用于替换 Xcode.app 中的 <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">xcodebuild</a>。</p>

<p>在 Xcode 中点击“Build &amp; Run”，所有的 project、build target 和 scheme settings 都被传到 xcodebuild，xcodebuild 调用构建的命令行，然后执行 .ipa 文件运行在真机或模拟器上。</p>

<p>这个过程我们只能祈祷它顺利了，因为 Xcode 将自己的构建系统封闭起来，我们从外部很难访问和控制。当我们试图通过 Terminal.app 和 xcodebuild 交互的时候，会发现真的很难用。</p>

<p>与其使用上个时代的工具，狂打断点去遍历所有错误，不如让 xctool 来告诉你什么是现代的解决方案。</p>

<h3>美学和风格</h3>

<p>xctool 给人的第一印象是它那漂亮、彩色的输出样式。</p>

<p><img src="http://yangfei.me/images/2013-11-06-pic-0.gif"></p>

<p>我们自己作为苹果硬件和软件的用户，对设计绝对不会轻视。xctool 也是。
它把构建过程的每一步都组织的很整洁，通过 ANSI 标准色 和 Unicode 符号输出易懂、易读的报告。</p>

<p>但是 xctool 的美丽不仅是外在，build 的过程中可以生成用其他工具可读的报告：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  xctool -reporter plain:output.txt build</span></code></pre></td></tr></table></div></figure>


<p>报告类型：</p>

<ul>
<li>pretty：（默认）输出样式使用 ANSI 标准色和 Unicode 符号</li>
<li>plain：类似 pretty，但没有 ANSI 标准色和 Unicode 符号</li>
<li>phabricator：将构建/测试的结果输出为 JSON 数组，可导入到 <a href="http://phabricator.org/">Phabricator</a> 这个 code-review 工具</li>
<li>junit：生成兼容 <a href="http://junit.org/">JUnit</a>/<a href="http://xunit.codeplex.com/">xUnit</a> 的 XML 格式的测试结果</li>
<li>json-stream：输出构建/测试的事件流 （ JSON 字典格式），一行一个（如图）</li>
<li>json-compilation-database：输出 <a href="http://clang.llvm.org/docs/JSONCompilationDatabase.html">JSON Compilation Database</a>，可用于基于 <a href="http://clang.llvm.org/docs/LibTooling.html">Clang Tooling</a> 的工具，如 <a href="http://oclint.org/">OCLint</a></li>
</ul>


<h3>集成构建系统</h3>

<p>相对于 xcodebuild，xctool 另一个重大改进是可以和 Xcode.app 一样运行测试（xcodebuild 并不能分辨哪些 target 是 test target，从而单独运行它们）。</p>

<p>单单这个原因，对于 Objective-C 社区的持续集成测试这个领域，xctool 就有非常大的意义。</p>

<p>Travis CI</p>

<p><a href="https://travis-ci.org/">Travis CI</a> 为开源项目提供免费的持续集成服务（商业项目收费），支持 Objective-C。它可以在你每次提交到 GitHub 时自动运行你的测试代码，如果最新的提交导致构建失败它会通知你。</p>

<p>在你的 Objective-C 项目中添加 Travis CI，你需要<a href="http://about.travis-ci.org/docs/user/getting-started/">创建账号绑定 GitHub</a>，然后在你的 repo 中添加 .travis.yml 文件：</p>

<p>.travis.yml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: objective-c
</span><span class='line'>before_install:
</span><span class='line'>    - brew update
</span><span class='line'>    - brew install xctool
</span><span class='line'>script: xctool -workspace MyApp.xcworkspace -scheme MyApp test</span></code></pre></td></tr></table></div></figure>


<h3>OCLint</h3>

<p><a href="http://oclint.org/">OCLint</a> 是一个静态代码分析器，可以检测 Objective-C 代码（同时支持 C 和 C++），发现常见的问题：例如 if/else/try/catch/finally 声明出错、未被使用的本地实例和参数、过度复杂（有效代码行数 和 <a href="http://zh.wikipedia.org/wiki/%E5%9C%88%E8%A4%87%E9%9B%9C%E5%BA%A6">循环复杂度</a>太高）、冗余代码、<a href="http://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%BC%82%E5%91%B3">代码异味</a>、以及其他不好的代码。</p>

<p>还记得 xctool 的 json-compilation-database 格式吧，这种格式可以<a href="http://docs.oclint.org/en/dev/guide/xctool.html">被 OCLint 直接读取</a>，进而进行神奇的静态分析。</p>

<p>在我写这篇文章的时候，离构建系统集成被广泛接受还有很长的路，但我的希望是，既然已经开始，
大家就应该齐心协力，让这个有前途的工具变得更加的强大。</p>

<p>这就像一座城市，随着人口的增长，基础设施就需要改变。通过各种各样的方式，通过本地政府、新兴组织，或者其他。总之，环境需要改变，以适应人口的增长。</p>

<p>Objective-C 已经并且还将随着 iOS 设备的流行而快速进化。为更多新进开发者提供必要的基础设施是社区的责任，当然这离不开与苹果的协作（有时是反对或抗议）。我们在这方面做得如何，决定了我们是否真正理解并传达了作为专业开发者应当扮演的角色，以及应当承担责任。</p>

<p>我们是该成为平庸的业余者，还是该成为改善技术的关键角色？</p>

<p>xctool，和社区的其他工具一样，为这门语言的未来和生态，提供了希望和灵感。让我们继续创造这样强大的工具，创造我们为之自豪的开发体验。</p>

<p><em>注：本文译自 <a href="http://nshipster.com/xctool/">NSHipster</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDev Weekly - 1105]]></title>
    <link href="http://yangfei.me/blog/2013-11-05-idevweekly/"/>
    <updated>2013-11-05T18:00:00+08:00</updated>
    <id>http://yangfei.me/blog/idevweekly</id>
    <content type="html"><![CDATA[<h5>• <a href="http://ionicons.com/">ionicons</a> / <a href="https://github.com/TapTemplate/ionicons-iOS">ionicons-iOS</a></h5>

<p>ionicons 是一套免费开源的图标字体，其中一半为 iOS 7 的系统图标，另一半风格也相似。ionicons-iOS 是他们提供的一个 iOS 库，使得在 iOS app 中使用 ionicons 非常方便，你可以作为 UIFont 使用，也可以作为 UILabel 和 UIImage。使用 ionicons 的好处是，你可以更自由地控制系统图标的大小、颜色，而且还有其他图标可选，更重要的是它支持 iOS 5+，这样你所有版本的 app 就可以保持统一的图标风格。</p>

<!-- more -->


<p><img src="http://yangfei.me/images/2013-11-05-pic-0.png"></p>

<h5>• <a href="http://yangfei.me/blog/2013-11-06-xctool/">让构建/测试(build/test)变得更轻松：xctool</a></h5>

<p>xctool 是 Fred Potter 的开源项目，来自于他在 Facebook 工作中创建的自动构建系统。xctool 用于替换 Xcode.app 中的 xcodebuild，让构建和测试变得更轻松。</p>

<h5>• <a href="http://www.appcoda.com/customize-navigation-status-bar-ios-7">自定义 iOS 7 中 Navigation Bar 和 Status Bar</a></h5>

<p>iOS 7 中 Navigation Bar 和 Status Bar 的风格有着非常明显的变化，这篇文章系统地讲解了如何对其自定义。（本文有<a href="http://beyondvincent.com/blog/2013/11/03/120-customize-navigation-status-bar-ios-7/">中文翻译</a> By 破船之家）</p>

<h5>• <a href="http://bradfrostweb.com/blog/post/float-label-pattern/">浮动式表单标签设计</a></h5>

<p>一种新颖的表单交互设计，非常棒。（本文有<a href="http://beforweb.com/node/337">中文翻译</a> By C7210）</p>

<p><img src="http://yangfei.me/images/2013-11-05-pic-1.gif"></p>

<h5>• <a href="http://www.shinobicontrols.com/blog/posts/2013/09/19/introducing-ios7-day-by-day/">每天一篇 • iOS 7 新特性</a></h5>

<ul>
<li>Day 0 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/19/ios7-day-by-day-day-0-uikit-dynamics/">UIKit Dynamics</a></li>
<li>Day 1 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/20/ios7-day-by-day-day-1-nsurlsession/">NSURLSession</a></li>
<li>Day 2 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/23/ios7-day-by-day-day-2-asset-catalog/">Asset Catalog</a></li>
<li>Day 3 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/24/ios7-day-by-day-day-3-background-fetch/">Background Fetch</a></li>
<li>Day 4 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/25/ios7-day-by-day-day-4-avspeechsynthesizer/">AVSpeechSynthesizer</a></li>
<li>Day 5 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/26/ios7-day-by-day-day-5-uidynamics-with-collection-views/">UIDynamics with Collection Views</a></li>
<li>Day 6 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/27/ios7-day-by-day-day-6-tint-color/">Tint Color</a></li>
<li>Day 7 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/09/30/ios7-day-by-day-day-7-taking-snapshots-of-uiviews/">Taking Snapshots of UIViews</a></li>
<li>Day 8 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/01/ios7-day-by-day-day-8-reading-list-with-safariservices/">Reading list with SafariServices</a></li>
<li>Day 9 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/02/ios7-day-by-day-day-9-device-identification/">Device Identification</a></li>
<li>Day 10 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/03/ios7-day-by-day-day-10-custom-uiviewcontroller-transitions/">Custom UIViewController Transitions</a></li>
<li>Day 11 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/04/ios7-day-by-day-day-11-uiview-key-frame-animations/">UIView Key-frame Animations</a></li>
<li>Day 12 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/07/ios7-day-by-day-day-12-dynamic-type-and-font-descriptors/">Dynamic Type and Font Descriptors</a></li>
<li>Day 13 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/08/ios7-day-by-day-day-13-route-directions-with-mapkit/">Route Directions with MapKit</a></li>
<li>Day 14 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/09/ios7-day-by-day-day-14-interactive-view-controller-transitions/">Interactive View Controller Transitions</a></li>
<li>Day 15 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/10/ios7-day-by-day-day-15-coreimage-filters/">CoreImage Filters</a></li>
<li>Day 16 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/11/ios7-day-by-day-day-16-decoding-qr-codes-with-avfoundation/">Decoding QR Codes with AVFoundation</a></li>
<li>Day 17 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/14/ios7-day-by-day-day-17-ibeacons/">iBeacons</a></li>
<li>Day 18 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/15/ios7-day-by-day-day-18-detecting-facial-features-with-coreimage/">Detecting Facial Features with CoreImage</a></li>
<li>Day 19 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/16/ios7-day-by-day-day-19-uitableview-row-height-estimation/">UITableView Row Height Estimation</a></li>
<li>Day 20 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/17/ios7-day-by-day-day-20-view-controller-content-and-navigation-bars/">View controller content and navigation bars</a></li>
<li>Day 21 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/18/ios7-day-by-day-day-21-multi-column-textkit-text-rendering/">Multi-column TextKit text rendering</a></li>
<li>Day 22 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/21/ios7-day-by-day-day-22-downloadable-fonts/">Downloadable Fonts</a></li>
<li>Day 23 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/22/ios7-day-by-day-day-23-multipeer-connectivity/">Multipeer Connectivity</a></li>
<li>Day 24 :: <a href="http://www.shinobicontrols.com/blog/posts/2013/10/23/ios7-day-by-day-day-24-the-end/">The End</a></li>
</ul>


<h3>其他</h3>

<h4>• <a href="http://www.yangzhiping.com/psy/startup.html">写给创业者的六个心理学原理</a></h4>

<p>阳志平的个人网站是我最喜欢的博客之一，阳老师的文章读起来很酣畅，品起来受益匪浅，总之对他的文章充满期待。这是前几天新增的博文，分上下两篇。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iDev Weekly - 1009]]></title>
    <link href="http://yangfei.me/blog/2013-10-29-idevweekly/"/>
    <updated>2013-10-29T12:51:00+08:00</updated>
    <id>http://yangfei.me/blog/idevweekly</id>
    <content type="html"><![CDATA[<h3>新闻</h3>

<h5><a href="http://engineering.linkedin.com/mobile/linkedin-intro-doing-impossible-ios?utm_source=iOS+Dev+Weekly&amp;utm_campaign=iOS_Dev_Weekly_Issue_117&amp;utm_medium=email">LinkedIn Intro: Doing the Impossible on iOS</a></h5>

<p>LinkedIn Intro 是 LinkedIn 推出的一款新产品，它能把你的 LinkedIn 个人介绍嵌入到 iPhone 邮件客户端中。不知道哪些人会喜欢这个功能，我只是好奇他们是如何做到的。有兴趣的点开链接查看具体的实现方法。</p>

<!-- more -->


<p><img src="http://yangfei.me/images/2013-10-29-pic-0.png"></p>

<h3>工具</h3>

<h5><a href="http://www.apportable.com/">Apportable</a></h5>

<p>用 Objective-C 能写 Android 应用吗？答案是：YES！</p>

<p>Apportable 是一个把 iOS app 转换成 Android app 的工具，它支持 UIKit、CoreData、CoreAnimation、Cocos2D，甚至支持 Android 版的“推送”和“StoreKit”。这确实挺屌的，竟然能用 Objective-C 完成安卓的各种功能，甚至支持 Android 特有的硬件返回按钮。通过他们的介绍视频可以看到，把 iOS 版本转换成 Android 版本成本低了很多，也许移植过程会有一些注意事项，但确实是一个非常有趣非常棒的工具。</p>

<h5><a href="http://chen.do/blog/2013/10/22/reverse-engineering-xcode-with-dtrace/?utm_source=iOS+Dev+Weekly&amp;utm_campaign=iOS_Dev_Weekly_Issue_117&amp;utm_medium=email">Xcode 插件: 自动补全增强版</a></h5>

<p>Xcode 自带的 Code Sense 只能根据前缀自动补全，这经常让记单词捉急的人很抓狂。Jack Chen 写的这个插件采用动态模糊匹配，让自动补全更加智能，非常好用。妈妈再也不用担心你拼错单词了！</p>

<h5><a href="https://github.com/facebook/ios-snapshot-test-case">iOS 界面测试</a></h5>

<p>测试逻辑相对简单直接，但测试界面有时候比较棘手，你加了各种背景色、框框，却依然不直观。是不是对比UIView的尺寸和已知素材的尺寸更为便捷？Facebook 的工程师就写了这样一个测试类——FBSnapshotTestCase， 它用于测试“界面和图片资源的尺寸是否匹配”。如果你的app界面复杂素材多，可以试试。</p>

<h3>代码</h3>

<h5><a href="http://ronnqvi.st/controlling-animation-timing/">控制动画时间</a></h5>

<p>CAMediaTiming 是 CAAnimation 的一个协议，跟时间相关的属性都在这里。这篇文章让你更深入地了解 CAMediaTiming，进而更灵活地控制动画的时间。</p>

<h5><a href="http://sunsetlakesoftware.com/2013/10/21/optimizing-gaussian-blurs-mobile-gpu">高斯模糊的算法优化</a></h5>

<p>GPUImage 是一个非常著名的图像处理的库，iOS 7 发布后，作者重写了 GPUImage 库中的高斯模糊控件，如果对优化高斯模糊算法的过程有兴趣，可以仔细看看。</p>

<h5><a href="https://github.com/path/FastImageCache">FastImageCache</a></h5>

<p>图片的载入速度很重要，特别是多图快速滚动时的流畅度，某种程度上决定了 App 的用户体验。App 用户体验标杆 Path 给出了他们的解决方案，开源了他们存取图片的框架，值得借鉴学习。</p>

<h5><a href="http://www.sprite-kit.com/">Sprite Kit</a></h5>

<p>是不是觉得学习 Sprite Kit 的资料有点少？这里有个专门介绍 Sprite Kit 的网站，不错，收藏。</p>

<h3>设计</h3>

<h5><a href="http://blog.jaredsinclair.com/post/64880801326/untouchable">不可触摸</a></h5>

<p>大破才能大立，iOS 7 肯定是大破了，立没立从6月份到现在大家都还在讨论。。。我个人非常喜欢 iOS 7 带来的新鲜，非常喜欢各种线、各种“撑到边”、各种越看越好看的配色（特别强调“音乐”和“天气”两个Icon，简直完美！），但也有不喜欢的地方，比如毫无质感的Dock条、违和的GameCenter立体气泡、冗长的Zoom动画、所有按钮无边框……世界上没有所有人都喜欢的设计，每个人也都有自己的偏好，针对“所有按钮无边框”这一点，Jared Sinclair 写出了他自己的看法。</p>

<h5><a href="http://apple4us.com/2013/10/make-your-fancy-ui-and-interaction-get-out-of-my-way.html">不要让用户惊艳</a></h5>

<p>阅读不同观点能够激发你对设计的深入思考，这篇文章是唐茶创始人李如一对于上文《不可触摸》的一次思考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[M7 为开发者提供了哪些新东西？]]></title>
    <link href="http://yangfei.me/blog/2013-10-23-what-is-new-for-m7/"/>
    <updated>2013-10-23T13:55:00+08:00</updated>
    <id>http://yangfei.me/blog/what-is-new-for-m7</id>
    <content type="html"><![CDATA[<p>昨晚新发布的 iPad Air、iPad mini 2， 跟一个月前发布的 iPhone 5s 一样，都带了那款 M7 运动协处理器。</p>

<!-- more -->


<p><img src="http://yangfei.me/images/2013-10-23-pic-0.png"></p>

<p>关于 M7 的作用，苹果描述的通俗易懂：</p>

<blockquote><p>“全新 M7 协处理器如同 A7 芯片的得力助手。它专为测量来自加速感应器、陀螺仪和指南针的运动数据而设计，如果没有它，这项任务通常会落在 A7 芯片身上。但 M7 协处理器更擅长于此。追踪身体活动的健身 app 现可从 M7 协处理器读取相关数据，因此无需持续访问 A7 芯片，从而降低了耗电量。无论你在走路，跑步，甚至开车，M7 协处理器通通知晓。如果你的手机许久未动，例如当你睡觉时，M7 协处理器会减少网络检测，从而节省电池电量。”</p></blockquote>

<p>我把它概括为 2 点：</p>

<ol>
<li>节省电量</li>
<li>处理传感器数据（实时、持续、集中）</li>
</ol>


<p>这种解决方案，在 Android 阵营被称为 Sensor Hub。虽然现在 Sensor Hub 还只是在个别旗舰机型上出现，但考虑到它给移动设备带来的这两点好处立竿见影，可以想象很快各个商家各种型号的移动设备都会跟进，Sensor Hub 甚至可能成为移动设备的标配。</p>

<p>今天，我通过苹果提供的文档和 API 梳理一下，看看 M7 到底能给 iOS 开发者提供哪些新东西。</p>

<p>首先要有心理准备，新增的内容比较少，今年的 WWDC sessions 甚至没有提到 M7。运动协处理器的潜力需要逐步挖掘。</p>

<p>在 iOS 7 之前，和传感器数据打交道就是通过 CoreMotion 框架，M7 相关的接口依然封装在 CoreMotion 中。</p>

<p>我们可以从文档更新情况看出，2013年9月，CoreMotion 中仅增加了计步(CMStepCounter)、活动状态(CMMotionActivity)相关的类。</p>

<p><img src="http://yangfei.me/images/2013-10-23-pic-2.png"></p>

<p><img class="right" src="http://yangfei.me/images/2013-10-23-pic-1.png"></p>

<p>新增的类：</p>

<ul>
<li>CMStepCounter</li>
<li>CMMotionActivity</li>
<li>CMMotionActivityManager</li>
</ul>


<p>更新的类：</p>

<ul>
<li>CMMotionManager （仅为iOS7增加了一些错误常量）</li>
</ul>


<h3><code>CMStepCounter</code></h3>

<p>CMStepCounter 可以读取用户携带设备所走的步数。步数信息是由内置的硬件收集并储存的，你可以通过查询步数判断当前用户的活动状态。通过这个类，既可以得到当前的步数信息，也可以访问历史数据。</p>

<h3><code>CMMotionActivity</code></h3>

<p>此对象包含了运动事件的数据。在支持动作识别的设备上，你可以使用 CMMotionActivityManager 去查询当前运动状态的改变。当运动状态改变发生时，更新的信息会被打包成 CMMotionActivity 对象，并发给到你的 app。</p>

<p>在这个类中动作相关的属性不是互斥的。换句话说，有可能多个动作相关的属性都是 YES。例如，如果用户正在开一辆车并且车遇到红灯停止，这是更新的信息中 automotive 和 stationary 两个属性都会被设置为 YES。也有可能所有的属相都是 NO，如果设备的运动和步行、奔跑、开车都不相符。</p>

<p>开发者并不能直接创建 CMMotionActivity 实例。它由 CMMotionActivityManager 创建，并把它发送到你注册的回调 block 中。</p>

<p>运动类型：</p>

<ul>
<li>stationary  静止</li>
<li>walking  走路</li>
<li>running  跑步</li>
<li>automotive  开车</li>
<li>unknown  未知</li>
</ul>


<p>运动数据:</p>

<ul>
<li>startDate 运动的开始时间</li>
<li>confidence 运动强度</li>
</ul>


<h3><code>CMMotionActivityManager</code></h3>

<p>用于访问设备储存的运动数据。运动数据反映了用户在某段时间是在走路、跑步、开车或者静止。导航 app 可以在用户状态切换后提供不同的服务。通过这个类你可以收到当前运动状态改变的通知，或者读取过去的数据变化。</p>

<p>方法有这几个：</p>

<ul>
<li>+ isActivityAvailable 判断当前设备是否支持提供运动数据</li>
<li>– startActivityUpdatesToQueue:withHandler: 开始活动更新</li>
<li>– stopActivityUpdates 停止活动更新</li>
<li>– queryActivityStartingFromDate:toDate:toQueue:withHandler: 获取历史数据</li>
</ul>


<h2>总结</h2>

<p>以前通过 CoreMotion 处理传感器数据都是由CPU完成，现在 M7 把这一块接管了。但给开发者新增的接口还比较少，基本的新玩意儿是:</p>

<ol>
<li>计步</li>
<li>判断用户是在静止，走路，跑步，还是开车</li>
<li>1和2的历史数据</li>
</ol>


<h6>但这只是开始，将运动芯片单独剥离意义重大，试想如果所有的传感器都能常驻后台，移动设备能做的事将会更加有趣，特别是和可穿戴、智能家居等设备配合，充满想象！让我们拭目以待！</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworking 2.0 来了]]></title>
    <link href="http://yangfei.me/blog/2013-09-30-afnetworking-2-came/"/>
    <updated>2013-09-30T20:04:00+08:00</updated>
    <id>http://yangfei.me/blog/afnetworking-2-came</id>
    <content type="html"><![CDATA[<p>前几天 Mattt 发布了 AFNetworking 2.0，我的一个最大感慨就是，他怎么那么高产？</p>

<!-- more -->


<h2>关于 Mattt</h2>

<p>Mattt 是一位非常活跃的 iOS 开发大牛，从 AFNetworking 1.0 开始 follow 他。当时从他 AFNetworking 和 TTTAttributedLabel 等开源代码中学到了很多。他现在是 Heroku 的 Mobile Lead。</p>

<p>我一直觉得一个团队要想为开发者提供优秀的服务，这个团队本身应该足够 hacker 足够酷，比如 Github，这群人以及他们所做的事真的是非常帅。 Heroku 也不错，他们的首席架构师就是 Ruby 之父松本行弘，他们让 Web 开发变得如此的轻松。</p>

<p>我觉得 Mattt 确实是个 hacker，并且是个非常具有开源精神的 hacker。他的很多项目我都觉得非常有趣，这里列出一些。更多信息关注他的Github账号(<a href="https://github.com/mattt">@mattt</a>)和Twitter账户(<a href="https://twitter.com/mattt">@mattt</a>)。</p>

<ul>
<li><a href="http://asciiwwdc.com/">asciiwwdc</a> &ndash; searchable full-text transcripts of WWDC sessions</li>
<li><a href="http://afnetworking.com/">afnetworking 2.0</a> &ndash; a delightful networking library for iOS and Mac OS X</li>
<li><a href="http://nshipster.com/">nshipster</a> &ndash; a journal of the overlooked bits in Objective-C and Cocoa</li>
<li><a href="https://github.com/helios-framework/helios">helios</a> &ndash; an extensible open-source mobile backend framework</li>
<li><a href="http://nomad-cli.com/">nomad</a> &ndash; world-class command line utilities for iOS development</li>
<li><a href="http://rocket.github.io/">rocket</a> &ndash; a hybrid approach to real-time cloud applications</li>
</ul>


<h2>关于 AFNetworking</h2>

<p>AFNetworking 是一个用于 iOS 和 OS X 开发的网络请求框架，始于 2011 年 5月，那时候 Mattt 还在 Gowalla （Foursquare的竞争对手，后被Facebook收购）工作。基于苹果的一个Demo <a href="https://developer.apple.com/library/ios/samplecode/mvcnetworking/Introduction/Intro.html#//apple_ref/doc/uid/DTS40010443-Intro-DontLinkElementID_2">MVCNetworking</a>，Mattt 开始了 AFNetworking。当时 ASIHTTPRequest 还很流行，但很快更多的程序员发现 AFNetwoking 是更为现代的解决方案，所以它逐渐开始流行。现在，AFNetworking 有 9000+ stars，2300+ forks，是 Objective-C 开源社区最火的框架。</p>

<h2>重点介绍 AFNetworking 2.0</h2>

<p>AFNetworking 在易用性和扩展性之间平衡得非常好，但这并不是说它没有改进的空间。AFNetworking 2.0 的目标是调整原始设计中的一些奇怪的地方，同时添加强大的新架构，帮助新一代的应用程序变得更为强大。</p>

<h3>1.目的</h3>

<h5>兼容 NSURLSession</h5>

<p>在 iOS7 中 NSURLConnection 被 NSURLSession 取代，但 NSURLConnection 并没有被 deprecated，在一段时间内依然可用。不过，NSURLSession 才是未来，它解决了 NSURLConnection 的很多缺点。有人可能会说有 NSURLSession 还需要 AFNetworking 么，二者确实有重叠的地方，但 AFNetworking 作为一个更上层的抽象类，能提供的更多。2.0 兼容并扩展了 NSURLSession，铺平其中艰难的路线，最大限度的提高了易用性。</p>

<h5>模块化</h5>

<p>AFNetworking 1.0 被批评的一个地方是，它有点臃肿。其实 1.0 在类的层次上很具有模块化，但文件封装的不够方便，没办法单独分离出某个功能模块。随着时间的推移，特别是像 AFHTTPClient 这样的类，会变得很臃肿（创建请求，序列化请求参数，响应和解析，创建和管理各种操作，监控网络的可用性等都堆在一起）。在 2.0 中，你可以只挑选你需要的模块，可以通过 CocoaPods subspecs 使用，很方便。</p>

<h5>实时</h5>

<p>2.0 遵循 Rocket 技术，Rocket 是在现有的 REST 服务器之上，通过一些 Web 标准（如<a href="http://dev.w3.org/html5/eventsource/">Server-Sent Events</a>，<a href="http://tools.ietf.org/html/rfc6902">JSON Patch</a>），实现实时的数据更新，详情参考前文列表中的链接。</p>

<h3>2. 实现</h3>

<h5>NSURLConnection (iOS 6 &amp; 7)</h5>

<ul>
<li><code>AFURLConnectionOperation</code> &ndash; 它继承于 NSOperation，负责管理 NSURLConnection，实现它的 delegate 方法。</li>
<li><code>AFHTTPRequestOperation</code> &ndash; 它继承于 AFURLConnectionOperation，专门用于创建 HTTP 请求。2.0 的主要区别就是可以直接使用它，而不用再继承它，原因将会在下面的 Serialization 处解释。</li>
<li><code>AFHTTPRequestOperationManager</code> &ndash; 封装 HTTP 请求的常见方式，GET / POST / PUT / DELETE / PATCH……</li>
</ul>


<h5>NSURLSession (iOS 7)</h5>

<ul>
<li><code>AFURLSessionManager</code> &ndash; 创建和管理 NSURLSession 对象，以及此对象的数据和下载/上传等任务，实现对象和任务的代理方法。NSURLSession 的 API 本身有一些局限，AFURLSessionManager 能使其变得更好用。</li>
<li><p><code>AFHTTPSessionManager</code> &ndash; 它继承于 AFURLSessionManager，封装了 HTTP 请求的常见方式，GET / POST / PUT / DELETE / PATCH……</p>

<p><em>总的来说：为了支持最新的 NSURLSession 接口，同时兼容旧的 NSURLConnection，2.0 的核心组件将“网络请求”和“任务处理”分离。 AFHTTPRequestOperationManager 和 AFHTTPSessionManager 提供相似的功能，切换很方便，所以从 iOS 6 移植到 iOS 7 会很容易。之前绑在 AFHTTPClient 里的 serialization、security 和 reachability 模型都被分离了出来，基于 NSURLSession 和 NSURLConnection 的 API 都可复用这些模型。</em></p></li>
</ul>


<h5>序列化（Serialization）</h5>

<p>2.0 架构的一个突破就是，请求和解析的可序列化。序列化的灵活性允许在网络层添加更多的商业逻辑，自定义更方便。<code>&lt;AFURLRequestSerializer&gt;</code> 和 <code>&lt;AFURLResponseSerializer&gt;</code> 这两个协议，让你在 1.0 中的一些抱怨不复存在。</p>

<h5>安全</h5>

<p>AFNetworking 支持 <a href="http://blog.lumberlabs.com/2012/04/why-app-developers-should-care-about.html">SSL pinning</a>。这对涉及敏感数据的 App 很重要。</p>

<ul>
<li><code>AFSecurityPolicy</code> &ndash; 这个类通过特定证书和公共密钥评估链接的安全性和可信任度。在你的 App bundle 中添加服务器证书有助于防止“<a href="http://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击</a>”。</li>
</ul>


<h5>可达性（Reachability）</h5>

<p>另一个从 AFHTTPClient 中分离的功能是网络的可达性。现在你可以单独使用它，或者作为 AFHTTPRequestOperationManager / AFHTTPSessionManager 的一个属性。</p>

<ul>
<li><code>AFNetworkReachabilityManager</code> &ndash; 负责监控当前的网络可达性，当网络的可达性发生改变时，提供相应的 callback 和通知。</li>
</ul>


<h5>实时</h5>

<ul>
<li><code>AFEventSource</code> &ndash; 用 Objective-C 实现的 <a href="http://en.wikipedia.org/wiki/Server-sent_events">EventSource DOM API</a>。客户端和服务器建立一个长链接，服务器会把新的 Event 实时推给客户端。客户端收到的信息格式是<a href="http://tools.ietf.org/html/rfc6902">JSON Patch</a>，然后 JSON Patch 被转化为 AFJSONPatchOperation 对象。示例代码参考：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>NSURL *URL <span class="o">=</span> <span class="o">[</span>NSURL URLWithString:@<span class="s2">&quot;http://example.com&quot;</span><span class="o">]</span>;
</span><span class='line'>AFHTTPSessionManager *manager <span class="o">=</span> <span class="o">[[</span>AFHTTPClient alloc<span class="o">]</span> initWithBaseURL:URL<span class="o">]</span>;
</span><span class='line'><span class="o">[</span>manager GET:@<span class="s2">&quot;/resources&quot;</span> parameters:nil success:^<span class="o">(</span>NSHTTPURLResponse *response, id responseObject<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">[</span>resources addObjectsFromArray:responseObject<span class="o">[</span>@<span class="s2">&quot;resources&quot;</span><span class="o">]]</span>;
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>manager SUBSCRIBE:@<span class="s2">&quot;/resources&quot;</span> usingBlock:^<span class="o">(</span>NSArray *operations, NSError *error<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span>AFJSONPatchOperation *operation in operations<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            switch <span class="o">(</span>operation.type<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">case </span>AFJSONAddOperationType:
</span><span class='line'>                    <span class="o">[</span>resources addObject:operation.value<span class="o">]</span>;
</span><span class='line'>                    <span class="nb">break</span>;
</span><span class='line'>                default:
</span><span class='line'>                    <span class="nb">break</span>;
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> error:nil<span class="o">]</span>;
</span><span class='line'><span class="o">}</span> failure:nil<span class="o">]</span>;
</span></code></pre></td></tr></table></div></figure>


<h5>UIKit 扩展</h5>

<p>2.0 的中所有 UIKit 扩展都被分离出来并进行了增强。</p>

<ul>
<li><code>AFNetworkActivityIndicatorManager</code>: 新增自动开始或结束状态栏上的网络指示器。</li>
<li><code>UIImageView+AFNetworking</code>: 新增显示图片前剪裁或者加滤镜的功能。</li>
<li><code>UIButton+AFNetworking</code> (新增): 类似 UIImageView+AFNetworking，按钮的背景图从线上下载。</li>
<li><code>UIActivityIndicatorView+AFNetworking</code> (新增): 根据网络请求的状态自动开始或结束。</li>
<li><code>UIProgressView+AFNetworking</code> (新增): 自动跟踪某个请求的上传下载的进度。</li>
<li><code>UIWebView+AFNetworking</code> (新增): 支持网络请求的进度和内容转换。</li>
</ul>


<h3>3. 使用</h3>

<p>在 CocoaPods 中使用 AFNetworking 2.0：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>platform :ios, <span class="s1">&#39;7.0&#39;</span>
</span><span class='line'>pod <span class="s2">&quot;AFNetworking&quot;</span>, <span class="s2">&quot;2.0.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果之前你是用 1.0，这个<a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-2.0-Migration-Guide">《AFNetworking 2.0 迁移指南》</a>应该会有帮助。</p>

<h2>最后</h2>

<p>AFNetworking 2.0 是一次非常有价值的更新，谢谢 Mattt 带来这么棒的开源项目。在互联网领域，要想成为牛人，除了聪明和勤奋，我想一定少不了分享和交流，那些具有开源精神的人，那些喜欢和不同人、不同想法碰撞的人，才有可能走在时代的前沿。</p>
]]></content>
  </entry>
  
</feed>
